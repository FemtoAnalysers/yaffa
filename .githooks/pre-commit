#!/bin/bash

# Flag to track if any pylint errors occurred
FAILED=0

# Get a list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$')

# Check if there are any Python files to lint
if [ -z "$STAGED_FILES" ]; then
    exit 0
fi

# Iterate over each staged Python file
for FILE in $STAGED_FILES; do
    # Create a temporary file to hold the staged content
    TEMP_FILE=$(mktemp)

    # Extract the staged content of the file
    git show ":$FILE" > "$TEMP_FILE"

    # Run pylint on the staged content and capture the output
    pylint_output=$(python3 -m pylint --rcfile=.github/linters/.python-lint "$TEMP_FILE")
    pylint_exit_code=$?

    # Display the pylint output
    if [ $pylint_exit_code -ne 0 ]; then
        echo -e "${pylint_output//$TEMP_FILE/\\e[3;33m$FILE\\e[0m}"
        FAILED=1
	fi

    # Remove the temporary file
    rm "$TEMP_FILE"
done

# If any file failed pylint, prevent the commit
if [ $FAILED -ne 0 ]; then
    echo -e "\e[31mCommit aborted due to pylint errors.\e[0m"
    exit 1
fi

# If all files passed, allow the commit to proceed
exit 0
